#include <stdio.h>
typedef int element;
#define MAX_STACK_SIZE 100
typedef enum {
	leftparen,rightparen, plus, minus,multiply,divide, eos,operand
}words;
typedef struct {
	element stack[MAX_STACK_SIZE];
	int top;
}StackType;
void init(StackType* s) {
	s->top = -1;
}
int is_full(StackType *s) {
	if (s->top == MAX_STACK_SIZE) {
		return 1;
	}
	else return 0;
}
void push(StackType* s, int item) {
	if (is_full(s)) {
		printf("스택 포화 에러\n");
	}
	else s->stack[++(s->top)] = item;
}
int peek(StackType* s) {
	if (is_empty(s)) {
		printf("스택 공백 에러\n");
		exit(1);
	}
	else return s->stack[s->top];
}
int pop(StackType* s) {
	if (is_empty(s)) {
		printf("스택 공백 에러\n");
		exit(1);
	}
	else return s->stack[(s->top)--];
}
int prec(char op) {
	switch (op) {
	case'(':case')':return 0;
	case'+':case'-':return 1;
	case'*':case'/':return 2;
	}
}
int is_empty(StackType* s) {
	return(s->top == -1);
}
void infix_to_postfix(char* infix, char* postfix) {
	StackType s;
	init(&s);
	while (*infix != '\0') {
		if (*infix == '(') {
			push(&s, *infix);
			infix++;
		}
		else if (*infix == ')') {
			while (peek(&s) != '(') {
				*postfix++ = pop(&s);
				*postfix++ = ' ';
			}
			pop(&s);
			infix++;
		}
		else if (*infix == '+' || *infix == '-' || *infix == '*' || *infix == '/') {
			while (!is_empty(&s) && (prec(*infix) <= prec(peek(&s)))) {
				*postfix++ = pop(&s);
				*postfix++ = ' ';
			}
			push(&s, *infix);
			infix++;
		}
		else if (*infix >= '0' && *infix <= '9') {
			do {
 				*postfix++ = *infix++;
			}while ((*infix >= '0' && *infix <= '9'));
			*postfix++ = ' ';
		}
		else
			infix++;
	}
	while (!is_empty(&s)){
		*postfix++ = pop(&s);
		*postfix++ = ' ';
	}
	postfix--;
	*postfix = '\0';
}
int eval(char* postfix) {
	words temp;
	int value, op1, op2;
	StackType s;
	init(&s);
	for (int i = 0; postfix[i] != '\0'; i++) {
		if (postfix[i] == ' ') {
			i++;
		}
		temp = classification(&postfix[i]);
		if (temp == operand) {
			value = change_value(&postfix[i], &i);
			push(&s, value);
		}
		else {
			op2 = pop(&s);
			op1 = pop(&s);
			switch (temp) {
			case plus:push(&s, op1 + op2);
				break;
			case minus:push(&s, op1 - op2);
				break;
			case multiply: push(&s, op1 * op2);
				break;
			case divide:push(&s, op1 / op2); break;
			}
		}
	}
	return pop(&s);
}
words classification(char* point) {
	switch (*point) {
	case '(':return leftparen;
	case ')':return rightparen;
	case'+':return plus;
	case'-':return minus;
	case'*':return multiply;
	case'/':return divide;
	case'\'':return eos;
	default:return operand;
	}
}
int change_value(char* num, int* index) {
	int value;
	char temp[100];
	int k,i;
	for (i = 0; num[i] != ' '; i++) {
		temp[i] = num[i];
	}
	temp[i] = '\0';
	value = atoi(temp);
	k = *index;
	*index = k + i;
	return value;
} 
int main() {
	char infix[MAX_STACK_SIZE], postfix[MAX_STACK_SIZE];
	scanf("%s", infix);
	infix_to_postfix(infix, postfix);
	printf("%s", postfix);
	printf("\n%d", eval(postfix));
	return 0;
}
